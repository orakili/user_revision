<?php

/**
 * @file
 * Install, update and uninstall functions for the user revision module.
 */

use Drupal\Core\Batch\BatchBuilder;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_install().
 */
function user_revision_install($is_syncing) {
  $file = \Drupal::service('extension.list.module')
    ->getPath('user_revision') . '/user_revision.install';

  // The schema update to add the revision tables and fields requires migrating
  // the existing data. So we create a batch to update the user entity type and
  // make the user entities revisionable.
  //
  // @see \Drupal\Core\Entity\EntityDefinitionUpdateManager::updateFieldableEntityType()
  $batch_builder = (new BatchBuilder())
    ->setTitle(new TranslatableMarkup('User revision installation'))
    ->setFile($file)
    ->addOperation('user_revision_update_user_entity_type_batch_operation')
    ->addOperation('user_revision_initialize_revision_fields_batch_operation');

  batch_set($batch_builder->toArray());

  // As of 2022/08/05, Drush doesn't run the batch when the module is enabled
  // via a config import so we need to do it manually.
  //
  // @see https://github.com/drush-ops/drush/pull/5106
  if ($is_syncing && php_sapi_name() === 'cli' && function_exists('drush_backend_batch_process')) {
    batch_get();
    drush_backend_batch_process();
  }
}

/**
 * Batch callback to make the user entities revisionable.
 *
 * @param mixed $context
 *   Array like batch context.
 */
function user_revision_update_user_entity_type_batch_operation(&$context) {
  if (!isset($context['sandbox'])) {
    $context['sandbox'] = [];
  }
  $sandbox = &$context['sandbox'];

  // Retrieve the total number of user entities to update.
  if (!isset($sandbox['total'])) {
    $sandbox['total'] = \Drupal::database()
      ->select('users', 'u')
      ->countQuery()
      ->execute()
      ?->fetchField() ?? 0;
  }

  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $definition_update_manager */
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();

  // Initialize the user entity type and field storage definitions necessary
  // for the update.
  if (!isset($sandbox['entity_type'])) {
    /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
    $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');

    $entity_type_id = 'user';
    $entity_type = $definition_update_manager->getEntityType($entity_type_id);
    $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);

    // Update the entity type definition, adding revision keys and tables.
    user_revision_add_revision_tables_and_keys($entity_type);

    // Add the revision field storage definitions for the revision fields.
    foreach (user_revision_get_revision_base_field_definitions($entity_type) as $field_name => $definition) {
      $field_storage_definitions[$field_name] = $definition;
    }

    // Mark the relevant base fields as revisionable.
    user_revision_set_revisionable_fields($entity_type, $field_storage_definitions);

    $sandbox['entity_type'] = $entity_type;
    $sandbox['field_storage_definitions'] = $field_storage_definitions;
  }

  $entity_type = $sandbox['entity_type'];
  $field_storage_definitions = $sandbox['field_storage_definitions'];

  // We need to be able to update the anonymous user which has an ID of 0 so
  // we prevent auto incrementing the ID when inserting the anonymous user
  // in the temporary table used for the data migration.
  //
  // @see \Drupal\user\UserStorage::doSaveFieldItems();
  // @see https://drupal.org/i/3222123
  $database = \Drupal::database();
  if ($database->databaseType() === 'mysql') {
    $sql_mode = $database->query("SELECT @@sql_mode;")->fetchField();
    $database->query("SET sql_mode = '$sql_mode,NO_AUTO_VALUE_ON_ZERO'");
  }

  // Update the entity type. This will migrate the existing data.
  $definition_update_manager->updateFieldableEntityType($entity_type, $field_storage_definitions, $sandbox);

  // Reset the SQL mode if we've changed it.
  if (isset($sql_mode, $database)) {
    $database->query("SET sql_mode = '$sql_mode'");
  }

  // Set the progress message.
  $context['message'] = new TranslatableMarkup('@progress/@total user entities have been made revisionable.', [
    '@progress' => $sandbox['progress'] ?? 0,
    '@total' => $sandbox['total'],
  ]);

  // Set the finished property to determine if the batch has ended.
  //
  // @see \Drupal\Core\Entity\Sql\SqlFieldableEntityTypeListenerTrait::onFieldableEntityTypeUpdate()
  if (isset($sandbox['#finished'])) {
    $context['finished'] = $sandbox['#finished'];
    unset($sandbox['#finished']);
  }
}

/**
 * Batch callback to initialize some revision fields.
 *
 * @param mixed $context
 *   Array like batch context.
 */
function user_revision_initialize_revision_fields_batch_operation(&$context) {
  /** @var \Drupal\Core\Entity\ContentEntityTypeInterface $entity_type */
  $entity_type = \Drupal::entityDefinitionUpdateManager()->getEntityType('user');

  // Unfortunately we cannot use BaseFieldDefinition::setInitialValueFromField()
  // to set the initial value of the revision user to the user ID because they
  // are not of the same type (integer vs entity_reference). So we do that here
  // with a simple update query.
  //
  // @see \Drupal\Core\Entity\Sql\SqlContentEntityStorageSchema::getSharedTableFieldSchema()
  \Drupal::database()
    ->update($entity_type->getRevisionTable())
    ->expression($entity_type->getRevisionMetadataKey('revision_user'), $entity_type->getKey('id'))
    ->isNull($entity_type->getRevisionMetadataKey('revision_user'))
    ->execute();

  $context['message'] = new TranslatableMarkup('Set the initial revision user ID for the user revisions');
  $context['finished'] = 1;
}
